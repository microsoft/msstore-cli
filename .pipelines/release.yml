trigger: none
pr: none

parameters:
  - name: dotnet_configurations
    type: object
    default:
      - Release
  - name: buildPlatforms
    type: object
    default:
      - x64
      - arm64

jobs:
- job: Build_Nuget_And_Tests
  displayName: Build Nuget and Run Tests
  strategy:
    matrix:
      ${{ each dotnet_config in parameters.dotnet_configurations }}:
        Windows_${{ dotnet_config }}:
          os: windows-latest
          dotnet_configuration: ${{ dotnet_config }}
        Linux_${{ dotnet_config }}:
          os: ubuntu-latest
          dotnet_configuration: ${{ dotnet_config }}
        Mac_${{ dotnet_config }}:
          os: macos-latest
          dotnet_configuration: ${{ dotnet_config }}
  pool:
    vmImage: $(os)
  steps:
  - checkout: self
  - task: Setup .NET
    inputs:
      version: 6.0.x
  - script: |
      sudo apt-get install -y gnome-keyring
      export $(dbus-launch --sh-syntax)
      export $(echo 'anypass_just_to_unlock' | gnome-keyring-daemon --unlock)
      export $(echo 'anypass_just_to_unlock' | gnome-keyring-daemon --start --components=gpg,pkcs11,secrets,ssh)
    condition: and(succeeded(), eq('$(os)', 'ubuntu-latest'))
    displayName: Install and Configure Keyring
  - script: dotnet restore MSStore.CLI.sln /p:Configuration=$(dotnet_configuration)
    displayName: Restore dependencies
  - script: dotnet build MSStore.CLI.sln --no-restore /p:Configuration=$(dotnet_configuration)
    displayName: Build
  - script: dotnet test MSStore.CLI.sln --no-restore /p:Configuration=$(dotnet_configuration) /p:CollectCoverage=true --logger "console;verbosity=detailed"
    displayName: Test
  - script: dotnet pack MSStore.API --no-build -c $(dotnet_configuration)
    condition: and(succeeded(), eq('$(os)', 'ubuntu-latest'))
    displayName: Pack NuGet
  - task: CopyFiles@2
    displayName: 'Copy Artifacts'
    inputs:
      contents: '$(System.DefaultWorkingDirectory)/MSStore.API/bin/$(dotnet_configuration)/*.nupkg'
      flattenFolders: true
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - publish: '$(Build.ArtifactStagingDirectory)'
    condition: and(succeeded(), eq('$(os)', 'ubuntu-latest'))
    displayName: Upload Artifact - NuGet
    artifact: NuGet
  
- job: Build_CLI
  strategy:
    matrix:
      ${{ each dotnet_config in parameters.dotnet_configurations }}:
        ${{ each platform in parameters.buildPlatforms }}:
          ${{ dotnet_config }}_windows_${{ platform }}:
            os: windows-latest
            dotnet_os: win
            dotnet_framework: net6.0-windows10.0.17763.0
            dotnet_arch: ${{ platform }}
            dotnet_configuration: ${{ dotnet_config }}
          ${{ dotnet_config }}_linux_${{ platform }}:
            os: ubuntu-latest
            dotnet_os: linux
            dotnet_framework: net6.0
            dotnet_arch: ${{ platform }}
            dotnet_configuration: ${{ dotnet_config }}
          ${{ dotnet_config }}_macos_${{ platform }}:
            os: macos-latest
            dotnet_os: osx.12
            dotnet_framework: net6.0
            dotnet_arch: ${{ platform }}
            dotnet_configuration: ${{ dotnet_config }}
  pool:
    vmImage: $(os)

  displayName: Build CLI

  steps:
  - checkout: self
  - task: Setup .NET
    inputs:
      version: 6.0.x
  - script: dotnet restore MSStore.CLI -r $(dotnet_os)-$(dotnet_arch) /p:Configuration=$(dotnet_configuration)
    displayName: Restore CLI
  - script: dotnet build MSStore.CLI --no-restore --no-self-contained -r $(dotnet_os)-$(dotnet_arch) -f $(dotnet_framework) /p:Configuration=$(dotnet_configuration)
    displayName: Build CLI
  - script: dotnet publish MSStore.CLI --no-build --no-self-contained -r $(dotnet_os)-$(dotnet_arch) -f $(dotnet_framework) /p:Configuration=$(dotnet_configuration)
    displayName: Publish SelfContained CLI
  - task: CopyFiles@2
    displayName: 'Copy Artifacts'
    inputs:
      contents: '$(System.DefaultWorkingDirectory)/MSStore.CLI/bin/$(dotnet_configuration)/$(dotnet_framework)/$(dotnet_os)-$(dotnet_arch)/publish/**/*'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - publish: '$(Build.ArtifactStagingDirectory)'
    displayName: Upload Artifact - CLI
    artifact: CLI-$(dotnet_os)-$(dotnet_arch)
