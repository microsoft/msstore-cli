# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
pr: none

parameters:
  - name: dotnet_configurations
    type: object
    default:
      - Release
  - name: buildPlatforms
    type: object
    default:
      - x64
      - arm64

jobs:
- job: Build_Nuget_And_Tests
  displayName: Build Nuget and Run Tests
  strategy:
    matrix:
      Windows:
        os: windows-latest
      Linux:
        os: ubuntu-latest
      Mac:
        os: macos-latest
  pool:
    vmImage: $(os)
  steps:
  - checkout: self
  #- name: Setup .NET
  #   uses: actions/setup-dotnet@v2
  #   with:
  #     dotnet_version: 6.0.x
  # - name: Install and Configure Keyring
  #   if: $(os == 'ubuntu-latest')
  #   run: |
  #     sudo apt-get install -y gnome-keyring
  #     export $(dbus-launch --sh-syntax)
  #     export $(echo 'anypass_just_to_unlock' | gnome-keyring-daemon --unlock)
  #     export $(echo 'anypass_just_to_unlock' | gnome-keyring-daemon --start --components=gpg,pkcs11,secrets,ssh)
  # - name: Restore dependencies
  #   run: dotnet restore MSStore.CLI.sln /p:Configuration=Release
  # - name: Build
  #   run: dotnet build MSStore.CLI.sln --no-restore /p:Configuration=Release
  # - name: Test
  #   run: dotnet test MSStore.CLI.sln --no-restore /p:Configuration=Release /p:CollectCoverage=true --logger "console;verbosity=detailed"
  # - name: Pack NuGet
  #   if: $(os == 'ubuntu-latest')
  #   run: dotnet pack MSStore.API --no-build -c Release
  # - name: Upload Artifact - NuGet
  #   if: $(os == 'ubuntu-latest' && !env.ACT)
  #   uses: actions/upload-artifact@v3
  #   with:
  #     name: NuGet
  #     path: MSStore.API/bin/Release/*.nupkg
  
- job: Build_CLI
  strategy:
    matrix:
      ${{ each dotnet_config in parameters.dotnet_configurations }}:
        ${{ each platform in parameters.buildPlatforms }}:
          ${{ dotnet_config }}_windows_${{ platform }}:
            os: windows-latest
            dotnet_os: win
            dotnet_framework: net6.0-windows10.0.17763.0
            dotnet_arch: ${{ platform }}
            dotnet_configuration: ${{ dotnet_config }}
          ${{ dotnet_config }}_linux_${{ platform }}:
            os: ubuntu-latest
            dotnet_os: linux
            dotnet_framework: net6.0
            dotnet_arch: ${{ platform }}
            dotnet_configuration: ${{ dotnet_config }}
          ${{ dotnet_config }}_macos_${{ platform }}:
            os: macos-latest
            dotnet_os: osx.12
            dotnet_framework: net6.0
            dotnet_arch: ${{ platform }}
            dotnet_configuration: ${{ dotnet_config }}
  pool:
    vmImage: $(os)

  displayName: Build CLI

  steps:
  - checkout: self
  # - name: Setup .NET
  #   uses: actions/setup-dotnet@v2
  #   with:
  #     dotnet_version: 6.0.x
  # - name: Restore CLI
  #   run: dotnet restore MSStore.CLI -r $(dotnet_os)-$(dotnet_arch) /p:Configuration=Release
  # - name: Build CLI
  #   run: dotnet build MSStore.CLI --no-restore --no-self-contained -r $(dotnet_os)-$(dotnet_arch) -f $(dotnet_framework) /p:Configuration=Release
  # - name: Publish SelfContained CLI
  #   run: dotnet publish MSStore.CLI --no-build --no-self-contained -r $(dotnet_os)-$(dotnet_arch) -f $(dotnet_framework) /p:Configuration=Release
  # - name: Upload Artifact - CLI
  #   if: $(!env.ACT)
  #   uses: actions/upload-artifact@v3
  #   with:
  #     name: CLI-$(dotnet_os)-$(dotnet_arch)
  #     path: $(github.workspace)/MSStore.CLI/bin/Release/$(dotnet_framework)/$(dotnet_os)-$(dotnet_arch)/publish/**/*
